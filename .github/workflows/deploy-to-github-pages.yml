name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      packages: read
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0.x'
      
      # Create NuGet.config for the build
      - name: Create NuGet.config
        run: |
          cat > NuGet.config << 'EOL'
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <packageSources>
              <clear />
              <add key="nuget.org" value="https://api.nuget.org/v3/index.json" />
              <add key="github-pages" value="https://dunleavy-meats.github.io/ProjectModel/" />
            </packageSources>
            <disabledPackageSources>
              <clear />
            </disabledPackageSources>
          </configuration>
          EOL
          
      # Fetch packages directly as backup
      - name: Setup backup package source
        run: |
          mkdir -p ./packages/dunleavymeats.models/1.0.0/
          curl -L -o ./packages/dunleavymeats.models/1.0.0/dunleavymeats.models.1.0.0.nupkg \
            https://github.com/Dunleavy-Meats/ProjectModel/raw/gh-pages/DunleavyMeats.Models.1.0.0.nupkg
          
          # Add as local source
          dotnet nuget add source ./packages --name local
          
      # Create Firebase config
      - name: Create Firebase Config
        run: |
          echo "window.firebaseConfig = {
            apiKey: \"${{ secrets.FIREBASE_API_KEY }}\",
            authDomain: \"${{ secrets.FIREBASE_AUTH_DOMAIN }}\",
            projectId: \"${{ secrets.FIREBASE_PROJECT_ID }}\",
            storageBucket: \"${{ secrets.FIREBASE_STORAGE_BUCKET }}\",
            messagingSenderId: \"${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}\",
            appId: \"${{ secrets.FIREBASE_APP_ID }}\"
          };" > BlazorApp/wwwroot/firebase-config.js

      # Alternative approach: Checkout Models repository and use project reference
      - name: Checkout Models Repository as fallback
        if: always()
        uses: actions/checkout@v3
        with:
          repository: dunleavy-meats/ProjectModel
          path: ProjectModel
          
      # Set up fallback to project reference if needed
      - name: Setup fallback project reference
        run: |
          # Try to restore packages first
          dotnet restore BlazorApp/BlazorApp.csproj --configfile NuGet.config || true
          
          # If the restore fails, use project reference instead
          if [ $? -ne 0 ]; then
            echo "Package restore failed, switching to project reference"
            # Create new project file with project reference
            cat > BlazorApp/BlazorApp.csproj.new << 'EOL'
          <Project Sdk="Microsoft.NET.Sdk.BlazorWebAssembly">
            <PropertyGroup>
              <TargetFramework>net7.0</TargetFramework>
              <Nullable>enable</Nullable>
              <ImplicitUsings>enable</ImplicitUsings>
              <ServiceWorkerAssetsManifest>service-worker-assets.js</ServiceWorkerAssetsManifest>
              <ServiceWorkerForce>true</ServiceWorkerForce>
            </PropertyGroup>
            <ItemGroup>
              <PackageReference Include="Microsoft.AspNetCore.Components.Authorization" Version="7.0.20" />
              <PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly" Version="7.0.19" />
              <PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly.DevServer" Version="7.0.19" PrivateAssets="all" />
              <PackageReference Include="MudBlazor" Version="7.16.0" />
            </ItemGroup>
            <ItemGroup>
              <ProjectReference Include="../ProjectModel/Models/Models.csproj" />
            </ItemGroup>
            <ItemGroup>
              <ServiceWorker Include="wwwroot\service-worker.js" PublishedContent="wwwroot\service-worker.published.js" />
            </ItemGroup>
            <ItemGroup>
              <Content Update="wwwroot\**\*">
                <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
              </Content>
            </ItemGroup>
          </Project>
          EOL
            mv BlazorApp/BlazorApp.csproj.new BlazorApp/BlazorApp.csproj
          fi
        
      - name: Publish .NET Project
        run: dotnet publish BlazorApp/BlazorApp.csproj -c Release -o release --nologo
      
      # Add .nojekyll file
      - name: Add .nojekyll file
        run: touch release/wwwroot/.nojekyll

      # Update base href
      - name: Update base href
        run: sed -i 's|<base href="/" />|<base href="/SecurityOfficeWebApp/" />|g' release/wwwroot/index.html

      # Create 404.html for SPA routing
      - name: Create 404.html for SPA routing
        run: |
          cat > release/wwwroot/404.html << 'EOL'
          <!DOCTYPE html>
          <html>
          <head>
              <meta charset="utf-8">
              <title>Dunleavy Security App</title>
              <script type="text/javascript">
                  var segmentCount = 1;
                  var location = window.location;
                  var baseUrl = location.pathname.slice(0, location.pathname.indexOf('/', 1)) || '';
                  var redirectUrl = baseUrl + '/?route=' +
                      location.pathname.slice(1).split('/').slice(segmentCount).join('/').replace(/&/g, '~and~');
                  if (location.search) {
                      redirectUrl += (redirectUrl.indexOf('?') === -1 ? '?' : '&') + 
                          location.search.slice(1).replace(/&/g, '~and~');
                  }
                  location.replace(redirectUrl + location.hash);
              </script>
          </head>
          <body>
          </body>
          </html>
          EOL

      # Add redirect script to index.html
      - name: Add redirect script to index.html
        run: |
          sed -i '/<head>/a \
              <script type="text/javascript">\
                  (function(l) {\
                      if (l.search && l.search.indexOf("?route=") === 0) {\
                          var route = l.search.slice(7);\
                          route = route.replace(/~and~/g, "&");\
                          history.replaceState(null, null,\
                              l.pathname.slice(0, -1) + (route ? "/" + route : "") + l.hash\
                          );\
                      }\
                  }(window.location))\
              </script>' release/wwwroot/index.html

      # Update service worker assets manifest
      - name: Update service worker assets manifest
        run: |
          cd release/wwwroot
          # Remove 404.html from the service worker assets manifest
          sed -i '/"404.html"/d' service-worker-assets.js

      # Update service worker configuration
      - name: Update service worker configuration
        run: |
          cd release/wwwroot
          # Update the service worker assets manifest
          sed -i '/"undefined"/d' service-worker-assets.js
          sed -i '/"404.html"/d' service-worker-assets.js

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages
          FOLDER: release/wwwroot
