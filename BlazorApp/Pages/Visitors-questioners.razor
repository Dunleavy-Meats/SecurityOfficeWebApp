@page "/visitors-questionnaire"

@inject VisitorService VisitorService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService

<MudCard>
	<MudCardContent>
		<MudText Typo="Typo.h4" Align="Align.Start" Class="mb-4">Visitors Questionnaire</MudText>
	</MudCardContent>
	<MudTable T="VisitorWithQuestionerData" Items="@AllVisitors" Hover="true" FixedHeader="true" FixedFooter="true" Elevation="15" OnRowClick="RowClickEvent" Filter="new Func<VisitorWithQuestionerData,bool>(FilterFunc1)">
		<ToolBarContent>
			<MudText Typo="Typo.h6">Visitors Questionnaire Table</MudText>
			<MudSpacer />
			<MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
		</ToolBarContent>
		<HeaderContent>
			<MudTh>Type</MudTh>
			<MudTh>Visitor Name</MudTh>
			<MudTh>Company</MudTh>
			<MudTh>Phone Number</MudTh>
			<MudTh>Questionnaire Expiry Date</MudTh>
			<MudTh>Number of Questionnaire</MudTh>
		</HeaderContent>
		<RowTemplate>
			<MudTd DataLabel="Visitor Type">@context.Visitor.Details.Type</MudTd>
			<MudTd DataLabel="Visitor Name">@context.Visitor.Details.VisitorName</MudTd>
			<MudTd DataLabel="Company Name">@context.Visitor.Details.CompanyName</MudTd>
			<MudTd DataLabel="Mobile Number">@context.Visitor.Details.MobileNumber</MudTd>
			@if (context.Visitor.Details.QuestionerExpiryDate.HasValue)
			{
				<MudTd DataLabel="QuestionerExpiryDate">
					@context.Visitor.Details.QuestionerExpiryDate.Value.ToShortDateString()
				</MudTd>
				<MudTd DataLabel="Number Of Questionnaire">
					@context.AllQuestionerData?.Count
				</MudTd>
			}
		</RowTemplate>
		<ChildRowContent>
			@if (context.ShowDetails && context.AllQuestionerData?.Count > 0)
			{
				<MudTr>
					<td colspan="6">
						<MudCard Elevation="15">
							<MudCardHeader>
								<CardHeaderContent>
									<MudText Typo="Typo.body1">Questionnaire for <strong>@context.Visitor.Details.VisitorName</strong> From <strong>@context.Visitor.Details.CompanyName</strong> </MudText>
								</CardHeaderContent>
							</MudCardHeader>
							<MudCardContent Class="pa-0">
								<MudTable Items="@context.AllQuestionerData" Context="questionerData" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0">
									<ColGroup>
										<col />
										<col />
									</ColGroup>
									<HeaderContent>
										<MudTh>Created On</MudTh>
										<MudTh>View</MudTh>
									</HeaderContent>
									<RowTemplate>
										<MudTd DataLabel="Created on">@questionerData.CreatedOn.Value.ToLocalTime().ToShortDateString()</MudTd>
										<MudTd DataLabel="Click To Show/Print">
											<MudIconButton OnClick="@(() => ShowQuestionerData(context.Visitor, questionerData))" Icon="@Icons.Material.Rounded.Print">Print/View</MudIconButton>
										</MudTd>
									</RowTemplate>
								</MudTable>
							</MudCardContent>
						</MudCard>
					</td>
				</MudTr>
			}
		</ChildRowContent>
		<PagerContent>
			<MudTablePager />
		</PagerContent>
	</MudTable>
</MudCard>

@code {

	private List<VisitorWithQuestionerData> AllVisitors = new();
	private string searchString1 = "";

	protected override async Task OnInitializedAsync()
	{
		AllVisitors = await VisitorService.GetVisitorWithQuestionerDataAsync();
		AllVisitors = AllVisitors.Where(x => x.AllQuestionerData?.Count > 0).ToList();
	}

	private void RowClickEvent(TableRowClickEventArgs<VisitorWithQuestionerData> clickEvent)
	{
		if (clickEvent.Item is null)
			return;
		clickEvent.Item.ShowDetails = !clickEvent.Item.ShowDetails;
	}



	private async Task ShowQuestionerData(Visitor visitor, QuestionerData questionerData)
	{
		var visitorWithQuestionerData = new VisitorWithQuestionerData(visitor, questionerData);
		try
		{
			if (string.IsNullOrEmpty(visitorWithQuestionerData.Visitor.Id))
			{
				Snackbar.Add("Visitor Id is invalid",Severity.Error);
				return;
			}
			var pdfBytes = await VisitorService.GetPDFForVisitor(visitorWithQuestionerData.Visitor.Id);
			var base64 = Convert.ToBase64String(pdfBytes);

			// Show dialog to choose between download and print
			var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
			var parameters = new DialogParameters
				{
					["ContentText"] = "Would you like to download or print the questionnaire?",
					["SubmitButtonText"] = "Download",
					["CancelButtonText"] = "Print",
					["Color"] = Color.Primary
				};

			var dialog = DialogService.Show<ConfirmationDialog>("PDF Options", parameters, options);
			var result = await dialog.Result;

			if (result != null && !result.Canceled)
			{
				// If confirmed, download the PDF
				var fileName = $"visitor_questionnaire_{visitorWithQuestionerData.Visitor.Details.VisitorName}_{DateTime.Now.ToString("dd_mm_yy ")}.pdf";
				await JSRuntime.InvokeVoidAsync("downloadPDF", fileName, base64);
				Snackbar.Add("Questionnaire PDF downloaded successfully", Severity.Success);
			}
			else
			{
				// If canceled, show print dialog
				await JSRuntime.InvokeVoidAsync("showPdfPrintDialog", base64);
				Snackbar.Add("Opening print dialog...", Severity.Info);
			}
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Error handling PDF: {ex.Message}", Severity.Error);
			Console.WriteLine($"PDF Error: {ex}");
		}
	}
	private bool FilterFunc1(VisitorWithQuestionerData element) => FilterFunc(element, searchString1);

	private bool FilterFunc(VisitorWithQuestionerData element, string searchString)
	{
		if (string.IsNullOrWhiteSpace(searchString))
			return true;
		if (element.Visitor.Details.VisitorName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if (!string.IsNullOrEmpty(element.Visitor.Details.CompanyName) && element.Visitor.Details.CompanyName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if ($"{element.Visitor.Details.MobileNumber} {element.Visitor.Details.Type}".Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		return false;
	}
}