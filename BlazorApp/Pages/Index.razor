@page "/"

@inject AttendanceService attendanceService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudCard>
    <MudCardContent>
        <MudText Typo="Typo.h4" Class="mb-4">Attendance Records</MudText>
    </MudCardContent>
    <MudDataGrid Elevation="5" T="AttendanceWithVisitor" Items="AllAttendanceRecords" SortMode="SortMode.Multiple" QuickFilter="@_quickFilter" Filterable="true" FixedHeader="true">
        <ToolBarContent>
            <MudText Class="pa-3" Typo="Typo.h6">Attendance Records </MudText>
            <MudDatePicker Class="pa-3" Label="Select the date to list Records for" ShowWeekNumbers="true" Date="_date" DateChanged="DateChanged" />
                    <MudTextField Class="pa-3" @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"/>
        </ToolBarContent>
        <Columns>
            <HierarchyColumn T="AttendanceWithVisitor" InitiallyExpandedFunc="@(x => x.Expanded)"/>
            <PropertyColumn Property="x => x.Visitor.Details.VisitorName" Title="Visitor Name" />
            <PropertyColumn Property="x => x.Visitor.Details.CompanyName" Title="Company" />
            <PropertyColumn Property="x => x.Visitor.Details.MobileNumber" />
            <PropertyColumn Property="x => x.Record.VehicleReg" Title="Vehicle Reg" />
            <PropertyColumn Property="x => x.Visitor.Details.Type" Title="Type">
                <CellTemplate>
                    @context.Item.Visitor.Details.Type.ToDisplayString()
                </CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.Record.CheckInTime" Title="CheckIn Time" />
            <PropertyColumn CellStyleFunc=@(x => GetCellStyle(x)) Property="x => GetLastCheckOutTime(x)" Title="CheckOut Time"/>
            <PropertyColumn Property="x => x.Record.Sessions.Count" Title="Sessions Count"/>
            
        </Columns>
        <ChildRowContent>
                    <MudCard Elevation="0">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.body1">Sessions Details for <strong>@context.Item.Visitor.Details.VisitorName</strong></MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudGrid>
                                <MudItem xs="12">
                                    <MudTable Items="@GetOrderedSessions(context.Item.Record.Sessions)" Context="SessionContext" Breakpoint="Breakpoint.Sm" Elevation="0">
                                        <ColGroup>
                                            <col style="width:650px;" />
                                            <col style="width:stretch" />
                                        </ColGroup>
                                        <HeaderContent>
                                            <MudTh>CheckIn Time</MudTh>
                                            <MudTh>CheckOut Time</MudTh>
                                        </HeaderContent>
                                        <RowTemplate>
                                            <MudTd DataLabel="CheckIn Time">@SessionContext.CheckInTime.ToString("dd/MM/yyyy HH:mm")</MudTd>
                                            <MudTd DataLabel="CheckOut Time">
                                                @(SessionContext.CheckOutTime.HasValue? SessionContext.CheckOutTime.Value.ToString("dd/MM/yyyy HH:mm") : "-")
                                            </MudTd>
                                        </RowTemplate>
                                    </MudTable>
                                </MudItem>
                                @if (!string.IsNullOrEmpty(context.Item.Record.SignatureImageData))
                                {
                                    <MudItem xs="12" Class="mt-4">
                                        <MudPaper Class="pa-4" Elevation="0">
                                            <MudText Typo="Typo.subtitle1" Class="mb-2">Signature:</MudText>
                                            <MudImage Src="@($"data:image/png;base64,{context.Item.Record.SignatureImageData}")"
                                                      Alt="Visitor Signature"
                                                      Width="200"
                                                      Height="100"
                                                      ObjectFit="ObjectFit.Contain"
                                                      Class="rounded-lg" />
                                        </MudPaper>
                                    </MudItem>
                                }
                                @if (!string.IsNullOrEmpty(context.Item.Record.UserSignatureImageData))
                                {
                                    <MudItem xs="12" Class="mt-4">
                                        <MudPaper Class="pa-4" Elevation="0">
                                            <MudText Typo="Typo.subtitle1" Class="mb-2">Security Signature:</MudText>
                                            <MudImage Src="@($"data:image/png;base64,{context.Item.Record.UserSignatureImageData}")"
                                                      Alt="Security Signature"
                                                      Width="200"
                                                      Height="100"
                                                      ObjectFit="ObjectFit.Contain"
                                                      Class="rounded-lg" />
                                        </MudPaper>
                                    </MudItem>
                                }
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
        </ChildRowContent>
    </MudDataGrid>
</MudCard>

@if (onSiteRecords.Count > 0){

    <MudDivider DividerType="DividerType.FullWidth" Class="my-12"/>

    <MudCard Elevation="12">
        <MudExpansionPanel Expanded="true" Text="@($"Currently on site ({onSiteRecords.Count})")">
            <ChildContent>
                <MudDivider DividerType="DividerType.FullWidth" />
                <MudTable T="AttendanceWithVisitor" Items="onSiteRecords" Elevation="5">
                    <HeaderContent>
					    <MudTh>Visitor</MudTh>
					    <MudTh>Company Name</MudTh>
					    <MudTh>Mobile Number</MudTh>
					    <MudTh>CheckIn Time</MudTh>
					    <MudTh>CheckOut Time</MudTh>
					    <MudTh>Sessions Count</MudTh>
				    </HeaderContent>
					    <RowTemplate>
						    <MudTd>@context.Visitor.Details.VisitorName</MudTd>
                            <MudTd>@context.Visitor.Details.CompanyName</MudTd>
                            <MudTd>@context.Visitor.Details.MobileNumber</MudTd>
                            <MudTd>@context.Record.CheckInTime.ToString()</MudTd>
                            <MudTd Style=@(GetCellStyle(context))>@context.CheckOutText()</MudTd>
                            <MudTd>@context.Record.Sessions.Count</MudTd>
					    </RowTemplate>
                </MudTable>
                </ChildContent>
        </MudExpansionPanel>
    </MudCard>
}

@code {

    private List<AttendanceWithVisitor> AllAttendanceRecords = new();
    private List<AttendanceWithVisitor> onSiteRecords = new();
    private DateTime? _date = DateTime.Today;
	private string _searchString = string.Empty;

    private void OnRowClicked(TableRowClickEventArgs<AttendanceWithVisitor> clickEvent)
    {
        if (clickEvent.Item == null)
            return;
        clickEvent.Item.Expanded = !clickEvent.Item.Expanded;
    }

    protected override async Task OnInitializedAsync()
    {
        await updatedData();
    }

    protected async Task DateChanged(DateTime? date)
    {
        _date = date;
        await updatedData();
    }

    private Func<AttendanceWithVisitor, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Visitor.Details.VisitorName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrEmpty(x.Visitor.Details.CompanyName))
        {
            if (x.Visitor.Details.CompanyName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                return true;
        }

        if (x.Visitor.Details.Type.ToDisplayString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    private async Task updatedData()
    {
        AllAttendanceRecords = await attendanceService.GetAttendanceAsync(_date != null ? _date.Value : DateTime.UtcNow);

        onSiteRecords = (await attendanceService.GetAttendanceAsync(DateTime.UtcNow)).Where(x => !x.Record.PermanentlyLeft).ToList();
    }

    private string GetCellStyle(AttendanceWithVisitor record)
    {
        if (record.Record.CheckOutTime == null)
        {
            if (record.Record.CheckInTime.Date == DateTime.UtcNow.Date)
                return "color: #07570b;";
            else
                return "color: #610b16;";
        }

        return string.Empty;
    }

    private string GetFirstCheckInTime(AttendanceWithVisitor record)
    {
        DateTime checkInTime;

        // If there are no sessions, use the main record's check-in time
        if (record.Record.Sessions == null || !record.Record.Sessions.Any())
            checkInTime = record.Record.CheckInTime;
        else
            // Get the earliest check-in time from all sessions
            checkInTime = record.Record.Sessions
                .OrderBy(s => s.CheckInTime)
                .First()
                .CheckInTime;

        return checkInTime.ToString("dd/MM/yyyy HH:mm");
    }

    private string GetLastCheckOutTime(AttendanceWithVisitor record)
    {
        string result = string.Empty;
        // If permanently left, but no checkout time set
        if (record.Record.PermanentlyLeft && !record.Record.CheckOutTime.HasValue)
            result = "Left permanently";

        // If there are no sessions or no sessions have checkout times
        if (record.Record.Sessions == null || 
            !record.Record.Sessions.Any() || 
            !record.Record.Sessions.Any(s => s.CheckOutTime.HasValue))
        {
            result = record.CheckOutText(); // Use your existing checkout text method
        }

        // Get the latest checkout time from all sessions
        var lastCheckout = (record.Record.Sessions ?? Enumerable.Empty<VisitorSession>())
            .Where(s => s.CheckOutTime.HasValue)
            .OrderByDescending(s => s.CheckOutTime)
            .FirstOrDefault();

        if (lastCheckout != null && lastCheckout.CheckOutTime.HasValue)
            result = lastCheckout.CheckOutTime.Value.ToString("dd/MM/yyyy HH:mm");

        if (result == string.Empty)
            return record.CheckOutText(); // Use your existing checkout text method as fallback
        if (!record.Record.PermanentlyLeft)
        {
            result += " (On Site)"; // Append "(On Site)" if not permanently left
        }
        return result; // Use your existing checkout text method as fallback
    }

    private List<VisitorSession> GetOrderedSessions(List<VisitorSession> sessions)
    {
        if (sessions == null || !sessions.Any())
            return new List<VisitorSession>();
            
        // Order by check-in time - newest first (you can change to ascending order if preferred)
        return sessions.OrderByDescending(s => s.CheckInTime).ToList();
        
        // If you prefer oldest first, use:
        // return sessions.OrderBy(s => s.CheckInTime).ToList();
    }
}