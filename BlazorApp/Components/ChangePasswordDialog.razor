@inject HttpClient HttpClient
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12">
                <MudText>Change password for: <strong>@UserName</strong></MudText>
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="newPassword" Label="New Password" Required="true"
                              InputType="InputType.Password" />
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="confirmPassword" Label="Confirm New Password" Required="true"
                              InputType="InputType.Password" 
                              Validation="@(new Func<string, IEnumerable<string>>(ValidateConfirmPassword))" />
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Submit" 
                   Disabled="@(!IsValid() || isSubmitting)">
            @if (isSubmitting)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Updating...</MudText>
            }
            else
            {
                <MudText>Change Password</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public string UserId { get; set; } = string.Empty;
    [Parameter] public string UserName { get; set; } = string.Empty;
    
    private string newPassword = string.Empty;
    private string confirmPassword = string.Empty;
    private bool isSubmitting = false;
    
    private void Cancel()
    {
        MudDialog.Cancel();
    }
    
    private bool IsValid()
    {
        return !string.IsNullOrWhiteSpace(newPassword) && 
               !string.IsNullOrWhiteSpace(confirmPassword) && 
               newPassword == confirmPassword;
    }
    
    private IEnumerable<string> ValidateConfirmPassword(string arg)
    {
        if (newPassword != confirmPassword)
            yield return "Passwords do not match";
    }
    
    private async Task Submit()
    {
        if (!IsValid()) return;
        
        try
        {
            isSubmitting = true;
            
            var passwordResetRequest = new 
            {
                UserId = UserId,
                NewPassword = newPassword
            };
            
            var response = await HttpClient.PostAsJsonAsync("api/users/reset-password", passwordResetRequest);
            
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add($"Password updated successfully", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Failed to update password: {error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
        }
    }
}