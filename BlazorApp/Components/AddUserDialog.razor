@inject HttpClient HttpClient
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12">
                <MudTextField @bind-Value="newUser.Name" Label="Name" Required="true" />
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="newUser.Email" Label="Email" Required="true" 
                              InputType="InputType.Email" />
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="newUser.Password" Label="Password" Required="true" 
                              InputType="InputType.Password" />
            </MudItem>
            <MudItem xs="12">
                <MudSelect T="string" @bind-Value="newUser.Role" Label="Role" Required="true">
                    <MudSelectItem Value="@("admin")">Admin</MudSelectItem>
                    <MudSelectItem Value="@("user")">User</MudSelectItem>
                    <MudSelectItem Value="@("super admin")">Super Admin</MudSelectItem>
                </MudSelect>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Submit" 
                   Disabled="@(!IsValid() || isSubmitting)">
            @if (isSubmitting)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Adding...</MudText>
            }
            else
            {
                <MudText>Add User</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;
    
    private UserCreationRequest newUser = new UserCreationRequest();
    private bool isSubmitting = false;
    
    private void Cancel()
    {
        MudDialog.Cancel();
    }
    
    private bool IsValid()
    {
        return !string.IsNullOrWhiteSpace(newUser.Name) && 
               !string.IsNullOrWhiteSpace(newUser.Email) && 
               !string.IsNullOrWhiteSpace(newUser.Password) && 
               !string.IsNullOrWhiteSpace(newUser.Role);
    }
    
    private async Task Submit()
    {
        if (!IsValid()) return;
        
        try
        {
            isSubmitting = true;
            
            var response = await HttpClient.PostAsJsonAsync("api/users", newUser);
            
            if (response.IsSuccessStatusCode)
            {
                var createdUser = await response.Content.ReadFromJsonAsync<User>();
                Snackbar.Add($"User {createdUser?.Name ?? "unknown"} created successfully", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Failed to create user: {error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
        }
    }
}